@model google_reviews.Models.GoogleDriveDocument
@{
    ViewData["Title"] = Model.Name;
}

<div class="container mt-4">
    <div class="row">
        <div class="col-md-12">
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a asp-action="Index">Drive Documents</a></li>
                    <li class="breadcrumb-item active" aria-current="page">@Model.Name</li>
                </ol>
            </nav>

            <div class="d-flex justify-content-between align-items-center mb-4">
                <h1>@Model.Name</h1>
                <div class="btn-group" role="group">
                    <a asp-action="Index" class="btn btn-outline-secondary">Back to List</a>
                    @if (!string.IsNullOrEmpty(Model.WebViewLink))
                    {
                        <a href="@Model.WebViewLink" target="_blank" class="btn btn-primary">Open in Google Drive</a>
                    }
                </div>
            </div>

            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="card-title">Document Information</h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-6">
                            <p><strong>Document ID:</strong> <code>@Model.Id</code></p>
                            <p><strong>Type:</strong> @GetFriendlyMimeType(Model.MimeType)</p>
                            <p><strong>Created:</strong> @Model.CreatedTime.ToString("MMMM dd, yyyy 'at' h:mm tt")</p>
                            <p><strong>Last Modified:</strong> @Model.ModifiedTime.ToString("MMMM dd, yyyy 'at' h:mm tt")</p>
                        </div>
                        <div class="col-md-6">
                            @if (Model.Size > 0)
                            {
                                <p><strong>Size:</strong> @FormatFileSize(Model.Size)</p>
                            }
                            @if (Model.Owners.Any())
                            {
                                <p><strong>Owner(s):</strong> @string.Join(", ", Model.Owners)</p>
                            }
                            <p><strong>Shared:</strong> @(Model.Shared ? "Yes" : "No")</p>
                            @if (!string.IsNullOrEmpty(Model.Description))
                            {
                                <p><strong>Description:</strong> @Model.Description</p>
                            }
                        </div>
                    </div>
                </div>
            </div>

            @if (!string.IsNullOrEmpty(Model.Content))
            {
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="card-title">Document Content</h5>
                        <button class="btn btn-sm btn-outline-secondary" onclick="copyToClipboard()">Copy Content</button>
                    </div>
                    <div class="card-body">
                        <pre id="document-content" class="bg-light p-3 rounded" style="max-height: 600px; overflow-y: auto; white-space: pre-wrap; font-family: 'Courier New', monospace;">@Model.Content</pre>
                    </div>
                </div>
            }
            else if (IsViewableDocument(Model.MimeType))
            {
                <div class="alert alert-info">
                    <h5>Preview</h5>
                    <p>This document can be viewed directly in Google Drive. Click "Open in Google Drive" to view the full content.</p>
                    @if (!string.IsNullOrEmpty(Model.WebViewLink))
                    {
                        <iframe src="@GetEmbedUrl(Model.WebViewLink)" 
                                width="100%" 
                                height="600" 
                                frameborder="0"
                                class="border rounded">
                        </iframe>
                    }
                </div>
            }
            else
            {
                <div class="alert alert-warning">
                    <h5>Content Preview Not Available</h5>
                    <p>This document type cannot be previewed here. Please use "Open in Google Drive" to view the content.</p>
                    <p><strong>MIME Type:</strong> @Model.MimeType</p>
                </div>
            }

            @if (!string.IsNullOrEmpty(Model.WebContentLink))
            {
                <div class="card mt-4">
                    <div class="card-body">
                        <h6>Download Link</h6>
                        <a href="@Model.WebContentLink" class="btn btn-sm btn-outline-success" target="_blank">
                            <i class="bi bi-download"></i> Download File
                        </a>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<script>
    function copyToClipboard() {
        const content = document.getElementById('document-content').textContent;
        navigator.clipboard.writeText(content).then(function() {
            // Show success message
            const button = event.target;
            const originalText = button.textContent;
            button.textContent = 'Copied!';
            button.classList.remove('btn-outline-secondary');
            button.classList.add('btn-success');
            
            setTimeout(function() {
                button.textContent = originalText;
                button.classList.remove('btn-success');
                button.classList.add('btn-outline-secondary');
            }, 2000);
        });
    }
</script>

@functions {
    private string GetFriendlyMimeType(string mimeType)
    {
        return mimeType switch
        {
            "application/vnd.google-apps.document" => "Google Document",
            "application/vnd.google-apps.spreadsheet" => "Google Spreadsheet",
            "application/vnd.google-apps.presentation" => "Google Presentation",
            "application/vnd.google-apps.form" => "Google Form",
            "application/pdf" => "PDF Document",
            "text/plain" => "Text File",
            "application/json" => "JSON File",
            "text/csv" => "CSV File",
            "text/html" => "HTML File",
            _ => mimeType
        };
    }
    
    private string FormatFileSize(long bytes)
    {
        string[] sizes = { "B", "KB", "MB", "GB" };
        double len = bytes;
        int order = 0;
        while (len >= 1024 && order < sizes.Length - 1)
        {
            order++;
            len = len / 1024;
        }
        return $"{len:0.##} {sizes[order]}";
    }
    
    private bool IsViewableDocument(string mimeType)
    {
        return mimeType.StartsWith("application/vnd.google-apps.") && 
               (mimeType.Contains("document") || mimeType.Contains("spreadsheet") || mimeType.Contains("presentation"));
    }
    
    private string GetEmbedUrl(string webViewLink)
    {
        // Convert Google Drive view links to embeddable format
        if (webViewLink.Contains("/edit"))
        {
            return webViewLink.Replace("/edit", "/preview");
        }
        return webViewLink;
    }
}